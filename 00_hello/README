
  Load `hello.hs' in GHC's REPL, `ghci'. You can inspect the module loaded
  (its name defaults to `Main') interactively.

   :; ghci
    GHCi, version 6.12.2: http://www.haskell.org/ghc/  :? for help
    Loading package ghc-prim ... linking ... done.
    Loading package integer-gmp ... linking ... done.
    Loading package base ... linking ... done.
    Loading package ffi-1.0 ... linking ... done.
    Prelude> :load ./hello.hs
    Ok, modules loaded: Main.
    *Main> :browse Main
    main :: IO ()
    *Main> :type main
    main :: IO ()
    *Main> :info main
    main :: IO ()   -- Defined at hello.hs:2:0-3

  You'll notice that there is only one "top level" declaration/definition in
  the file -- `main'. In Haskell, the `main' program is, by default, what's
  evaluated by the runtime system when the executable is run (this can be
  changed with compiler options but it's just as well not to do it).

  To build the command, use `make':

   :; make hello
    ghc --make -O2 -o hello hello.hs
    [1 of 1] Compiling Main             ( hello.hs, hello.o )
    Linking hello ...
   :; ./hello
    Hello.

  The included `Makefile' contains task for every utility we will cover in
  this tutorial; it also has a `clean' task.


                                                                     Exercizes
   ----------------------------------------------------------------------------

    01    Add a module declaration above the declaration of `main' in
          `hello.hs':

            module Hello where

          When you load `hello.hs' in `ghci', the module name has
          changed.

    02    You can use a shebang line with Haskell code:

            #!/usr/bin/env runhaskell

          Try running `hello.hs' as well as `hello' with `time'. The latter is
          much faster than the former.

