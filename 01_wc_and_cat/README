

  The subprogram `main' has type `IO ()'. This can be read "I/O of unit". The
  `()' is the one element type, unit. The `IO' is a parameterized type, like
  `vector<x>' in C++ or `Array<type>' in Java.

  Use GHCi to find out more about `IO':

    Prelude> :info IO
    newtype IO a
      = GHC.Types.IO (GHC.Prim.State# GHC.Prim.RealWorld
                      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
            -- Defined in GHC.Types
    instance Monad IO -- Defined in GHC.Base
    instance Functor IO -- Defined in GHC.Base

  The `IO' type accepts a type parameter, `a', and wraps it in a few compiler
  internal types. We won't go in to the details here; it suffices to say that
  the `#' all over the place are a clue that these are "unboxed" types and
  contribute greatly to the efficiency of the resulting program.

  The `IO' type is an *instance* of both `Functor' and `Monad', which are
  "type classes". A type class is rather like an interface in JAVA. In
  Haskell, data types do not have behaviour and consequently do not have
  methods; rather, there are functions that operate on them. Type classes
  allow one to add behaviour to a datatype, rather like "opening" a class
  definition in Ruby and inserting some new methods (only this is all static).

  Our implementation of `wc' makes heavy use of the IO monad, for opening
  files and publishing output. Try running it on it's own source code:

   :; make wc
    ghc --make -O2 -o wc wc.hs
    [1 of 1] Compiling Main             ( wc.hs, wc.o )
    Linking wc ...
   :; wc ./wc.hs
     121  736 4655 ./wc.hs

  Should get the same result as the native `wc':

   :; ./wc ./wc.hs
     121  736 4655 ./wc.hs

  Note that there are many type definitions in this one file. One makes heavy
  use of types in Haskell: to express one's intent, to clean up one's function
  definitions and to induce the compiler to reject logic errors.


                                                                     Exercizes
   ----------------------------------------------------------------------------

    01 -- You can replace any instance of `liftM' with `fmap' but not the
          other way around. What are the types of `liftM' and `fmap'?

    02 -- Can you extend `wc.hs' to open STDIN when the argument list is
          empty? Which function should you modify to accomplish this?

    03 -- Can you create `cat' from our `wc'?

    04 -- Can you extend `wc.hs' to accept command line options to output
          only line, word or character counts as desired, like the `wc' in
          coreutils?

    05 -- What do you have to change so that `wc' will reject file names if
          they resemble command line options? Look at the module `Data.Either'
          in Google and in GHCi. You can add an installed module to the
          environment with `:module' (or simply `:m'):

            Prelude> :module + Data.Either

          You can browse it with `:browse':

            Prelude Data.Either> :browse Data.Either
            data Either a b = Left a | Right b
            either :: forall a c b. (a -> c) -> (b -> c) -> Either a b -> c
            lefts :: forall a b. [Either a b] -> [a]
            partitionEithers :: forall a b. [Either a b] -> ([a], [b])
            rights :: forall a b. [Either a b] -> [b]

          What do you think you do to remove a module from the environment?

    06 -- In `wc.hs', we have a function `wc':

            wc (WCJob name handle)       =  do
              state                     <-  wc' handle
              return (WCResult name state)

          Can you rewrite this function with `fmap', omitting `do' notation?


