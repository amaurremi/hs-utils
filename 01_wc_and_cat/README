
  Our implementation of `wc' makes heavy use of the IO monad, for opening
  files and publishing output. Try running it on it's own source code:

   :; make wc
    ghc --make -O2 -o wc wc.hs
    [1 of 1] Compiling Main             ( wc.hs, wc.o )
    Linking wc ...
   :; wc ./wc.hs
     121  736 4655 ./wc.hs

  You should get the same result as the native `wc':

   :; ./wc ./wc.hs
     121  736 4655 ./wc.hs

  Note that there are many type definitions in this one file. One makes heavy
  use of types in Haskell: to express one's intent, to clean up one's function
  definitions and to induce the compiler to reject logic errors.

  The subprogram `main' has type `IO ()'. This can be read "I/O of unit". The
  `()' is the one element type, unit. The `IO' is a parameterized type, like
  `vector<x>' in C++ or `Array<type>' in Java. As both a `Functor' and a
  `Monad', it has access to `fmap' and `do' notation, both of which you will
  see in the example. We'll be unveiling monads, functors and do notation
  gradually over the next few lessons.


                                                                     Exercizes
   ----------------------------------------------------------------------------

    01 -- You can replace any instance of `liftM' with `fmap' but not the
          other way around. What are the types of `liftM' and `fmap'?

    02 -- Can you extend `wc.hs' to open STDIN when the argument list is
          empty? Which function should you modify to accomplish this?

    03 -- Can you create `cat' from our `wc'?

    04 -- Can you extend `wc.hs' to accept command line options to output
          only line, word or character counts as desired, like the `wc' in
          coreutils?

    05 -- What do you have to change so that `wc' will reject file names if
          they resemble command line options? Look at the module `Data.Either'
          in Google and in GHCi. You can add an installed module to the
          environment with `:module' (or simply `:m'):

            Prelude> :module + Data.Either

          You can browse it with `:browse':

            Prelude Data.Either> :browse Data.Either
            data Either a b = Left a | Right b
            either :: forall a c b. (a -> c) -> (b -> c) -> Either a b -> c
            lefts :: forall a b. [Either a b] -> [a]
            partitionEithers :: forall a b. [Either a b] -> ([a], [b])
            rights :: forall a b. [Either a b] -> [b]

          What do you think you do to remove a module from the environment?

    06 -- In `wc.hs', we have a function `wc':

            wc (WCJob name handle)       =  do
              state                     <-  wc' handle
              return (WCResult name state)

          Can you rewrite this function with `fmap', omitting `do' notation?
          The `job' function is a good model to follow.


